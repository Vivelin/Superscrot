using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Superscrot
{
    /// <summary>
    /// Represents the native methods that are shared between assemblies.
    /// </summary>
    internal class NativeMethods
    {
        // Prevent instances from being created. (look, MSDN told me to do this)
        private NativeMethods() { }

        /// <summary>
        /// Posted when the user presses a hot key registered by the RegisterHotKey function. The 
        /// message is placed at the top of the message queue associated with the thread that 
        /// registered the hot key. 
        /// </summary>
        internal const int WM_HOTKEY = 0x0312;

        internal const int ECM_FIRST = 0x1500;

        /// <summary>
        /// Sets the textual cue, or tip, that is displayed by the edit control to prompt the user 
        /// for information.
        /// </summary>
        internal const int EM_SETCUEBANNER = ECM_FIRST + 1;

        /// <summary>
        /// Hides the window and activates another window.
        /// </summary>
        internal const uint SW_HIDE = 0;

        /// <summary>
        /// Activates and displays a window. If the window is minimized or maximized, the system 
        /// restores it to its original size and position. An application should specify this flag 
        /// when displaying the window for the first time.
        /// </summary>
        internal const uint SW_SHOWNORMAL = 1;

        /// <summary>
        /// The RECT structure defines the coordinates of the upper-left and lower-right corners 
        /// of a rectangle.
        /// </summary>
        /// <remarks>
        /// By convention, the right and bottom edges of the rectangle are normally considered 
        /// exclusive. In other words, the pixel whose coordinates are (right, bottom) lies 
        /// immediately outside of the rectangle. For example, when RECT is passed to the FillRect 
        /// function, the rectangle is filled up to, but not including, the right column and 
        /// bottom row of pixels.
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        internal struct RECT
        {
            /// <summary>
            /// The x-coordinate of the upper-left corner of the rectangle.
            /// </summary>
            public int Left;

            /// <summary>
            /// The y-coordinate of the upper-left corner of the rectangle.
            /// </summary>
            public int Top;

            /// <summary>
            /// The x-coordinate of the lower-right corner of the rectangle.
            /// </summary>
            public int Right;

            /// <summary>
            /// The y-coordinate of the lower-right corner of the rectangle.
            /// </summary>
            public int Bottom;
        }

        /// <summary>
        /// Defines a system-wide hot key.
        /// </summary>
        /// <param name="hWnd">
        /// A handle to the window that will receive WM_HOTKEY messages generated by the hot key. 
        /// If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the 
        /// calling thread and must be processed in the message loop.
        /// </param>
        /// <param name="id">
        /// The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is 
        /// associated with the current thread rather than with a particular window. If a hot key 
        /// already exists with the same hWnd and id parameters, see Remarks for the action taken.
        /// </param>
        /// <param name="fsModifiers">
        /// The keys that must be pressed in combination with the key specified by the uVirtKey 
        /// parameter in order to generate the WM_HOTKEY message. 
        /// </param>
        /// <param name="vk">The virtual-key code of the hot key.</param>
        /// <returns>
        /// If the function succeeds, the return value is nonzero. If the function fails, the 
        /// return value is zero. To get extended error information, call GetLastError.
        /// </returns>
        [DllImport("user32.dll", SetLastError=true)]
        internal static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

        /// <summary>
        /// Frees a hot key previously registered by the calling thread. 
        /// </summary>
        /// <param name="hWnd">
        /// A handle to the window associated with the hot key to be freed. This parameter should 
        /// be NULL if the hot key is not associated with a window. 
        /// </param>
        /// <param name="id">The identifier of the hot key to be freed.</param>
        /// <returns>
        /// If the function succeeds, the return value is nonzero. If the function fails, the 
        /// return value is zero. To get extended error information, call GetLastError.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern bool UnregisterHotKey(IntPtr hWnd, int id);

        /// <summary>
        /// Sends the specified message to a window or windows. The SendMessage function calls the 
        /// window procedure for the specified window and does not return until the window 
        /// procedure has processed the message.
        /// </summary>
        /// <param name="hWnd">
        /// A handle to the window whose window procedure will receive the message. If this 
        /// parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level 
        /// windows in the system, including disabled or invisible unowned windows, overlapped 
        /// windows, and pop-up windows; but the message is not sent to child windows. Message 
        /// sending is subject to UIPI. The thread of a process can send messages only to message 
        /// queues of threads in processes of lesser or equal integrity level.
        /// </param>
        /// <param name="Msg">The message to be sent.</param>
        /// <param name="wParam">Additional message-specific information.</param>
        /// <param name="lParam">Additional message-specific information.</param>
        /// <returns>
        /// The return value specifies the result of the message processing; it depends on the 
        /// message sent.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, [MarshalAs(UnmanagedType.LPWStr)] string lParam);

        /// <summary>
        /// Retrieves a handle to the foreground window (the window with which the user is 
        /// currently working). The system assigns a slightly higher priority to the thread that 
        /// creates the foreground window than it does to other threads. 
        /// </summary>
        /// <returns>
        /// The return value is a handle to the foreground window. The foreground window can be 
        /// NULL in certain circumstances, such as when a window is losing activation. 
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        internal static extern IntPtr GetForegroundWindow();

        /// <summary>
        /// Retrieves the dimensions of the bounding rectangle of the specified window. The 
        /// dimensions are given in screen coordinates that are relative to the upper-left corner 
        /// of the screen.
        /// </summary>
        /// <param name="hwnd">A handle to the window.</param>
        /// <param name="lpRect">
        /// A pointer to a RECT structure that receives the screen coordinates of the upper-left 
        /// and lower-right corners of the window.
        /// </param>
        /// <returns>
        /// If the function succeeds, the return value is nonzero. If the function fails, the 
        /// return value is zero. To get extended error information, call GetLastError.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);

        /// <summary>
        /// Copies the text of the specified window's title bar (if it has one) into a buffer. If 
        /// the specified window is a control, the text of the control is copied. However, 
        /// GetWindowText cannot retrieve the text of a control in another application.
        /// </summary>
        /// <param name="hWnd">A handle to the window or control containing the text.</param>
        /// <param name="lpString">
        /// The buffer that will receive the text. If the string is as long or longer than the 
        /// buffer, the string is truncated and terminated with a null character.
        /// </param>
        /// <param name="nMaxCount">
        /// The maximum number of characters to copy to the buffer, including the null character. 
        /// If the text exceeds this limit, it is truncated.
        /// </param>
        /// <returns>
        /// If the function succeeds, the return value is the length, in characters, of the copied 
        /// string, not including the terminating null character. If the window has no title bar 
        /// or text, if the title bar is empty, or if the window or control handle is invalid, the 
        /// return value is zero. To get extended error information, call GetLastError. This 
        /// function cannot retrieve the text of an edit control in another application.
        /// </returns>
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        internal static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.LPWStr)] StringBuilder lpString, int nMaxCount);

        /// <summary>
        /// Retrieves the length, in characters, of the specified window's title bar text (if the 
        /// window has a title bar). If the specified window is a control, the function retrieves 
        /// the length of the text within the control. However, GetWindowTextLength cannot 
        /// retrieve the length of the text of an edit control in another application.
        /// </summary>
        /// <param name="hWnd">A handle to the window or control.</param>
        /// <returns>
        /// If the function succeeds, the return value is the length, in characters, of the text. 
        /// Under certain conditions, this value may actually be greater than the length of the 
        /// text. For more information, see the following Remarks section. If the window has no 
        /// text, the return value is zero. To get extended error information, call GetLastError. 
        /// </returns>
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        internal static extern int GetWindowTextLength(IntPtr hWnd);

        /// <summary>
        /// Allocates a new console for the calling process.
        /// </summary>
        /// <returns>
        /// If the function succeeds, the return value is nonzero. If the function fails, the 
        /// return value is zero. To get extended error information, call GetLastError.
        /// </returns>
        [DllImport("kernel32.dll")]
        internal static extern bool AllocConsole();

        /// <summary>
        /// Detaches the calling process from its console.
        /// </summary>
        /// <returns>
        /// If the function succeeds, the return value is nonzero. If the function fails, the 
        /// return value is zero. To get extended error information, call GetLastError.
        /// </returns>
        [DllImport("kernel32.dll")]
        internal static extern bool FreeConsole();

        /// <summary>
        /// Retrieves the window handle used by the console associated with the calling process.
        /// </summary>
        /// <returns>
        /// The return value is a handle to the window used by the console associated with the 
        /// calling process or NULL if there is no such associated console.
        /// </returns>
        [DllImport("kernel32.dll")]
        internal static extern IntPtr GetConsoleWindow();

        /// <summary>
        /// Sets the specified window's show state. 
        /// </summary>
        /// <param name="hWnd">A handle to the window.</param>
        /// <param name="nCmdShow">Controls how the window is to be shown.</param>
        /// <returns>
        /// If the window was previously visible, the return value is nonzero. If the window was 
        /// previously hidden, the return value is zero.
        /// </returns>
        [DllImport("user32.dll")]
        internal static extern bool ShowWindow(IntPtr hWnd, uint nCmdShow);
    }
}
